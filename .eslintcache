[{"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/index.tsx":"1","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/ConfigScreen.tsx":"2","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Page.tsx":"3","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/EntryEditor.tsx":"4","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Sidebar.tsx":"5","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Field.tsx":"6","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Dialog.tsx":"7","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/LocalhostWarning.tsx":"8","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/utils/hooks/useContentfulFields.ts":"9","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/FilterAutoComplete.tsx":"10","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/FilterAutoCompleteEntries.tsx":"11"},{"size":2319,"mtime":1611311951410,"results":"12","hashOfConfig":"13"},{"size":2273,"mtime":1611311951410,"results":"14","hashOfConfig":"13"},{"size":317,"mtime":1611311951410,"results":"15","hashOfConfig":"13"},{"size":335,"mtime":1611311951410,"results":"16","hashOfConfig":"13"},{"size":338,"mtime":1611311951410,"results":"17","hashOfConfig":"13"},{"size":5898,"mtime":1611662556510,"results":"18","hashOfConfig":"13"},{"size":5751,"mtime":1611664910630,"results":"19","hashOfConfig":"13"},{"size":1232,"mtime":1611311951410,"results":"20","hashOfConfig":"13"},{"size":1138,"mtime":1611521094680,"results":"21","hashOfConfig":"13"},{"size":3901,"mtime":1611663041220,"results":"22","hashOfConfig":"13"},{"size":2084,"mtime":1611664855240,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"rbsrsk",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/index.tsx",[],["49","50"],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/ConfigScreen.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Page.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/EntryEditor.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Sidebar.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Field.tsx",["51"],"// @ts-nocheck\nimport React, { useState, useEffect } from \"react\"\nimport { Button, Flex, Paragraph } from \"@contentful/forma-36-react-components\"\nimport { MultipleEntryReferenceEditor } from \"@contentful/field-editor-reference\"\nimport { FieldExtensionSDK } from \"@contentful/app-sdk\"\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK\n}\n\nconst Field = (props: FieldProps) => {\n  const {\n    contentTypeID,\n    descriptionFieldName,\n    locale,\n    relatedFieldID,\n  } = props.sdk.parameters.instance\n\n  const [errorMessage, setErrorMessage] = useState(\"\")\n  const [contentTypeFieldTitle, setContentTypeFieldTitle] = useState(\"\")\n  const [\n    relatedContentTypeFieldTitles,\n    setRelatedContentTypeFieldTitles,\n  ] = useState({})\n\n  const [selectedRelatedField, setSelectedRelatedField] = useState(null)\n  const [entries, setEntries] = useState(props.sdk.field.getValue() || [])\n\n  const openSearch = async (\n    locale,\n    contentTypeID,\n    contentTypeFieldTitle,\n    contentTypeFieldDescription,\n    relatedFieldID,\n    relatedContentTypeFieldTitles,\n    selectedRelatedField\n  ) => {\n    const selectedEntries = await props.sdk.dialogs.openCurrentApp({\n      title: \"Insert existing entries\",\n      minHeight: 700,\n      width: 800,\n      shouldCloseOnEscapePress: true,\n      shouldCloseOnOverlayClick: true,\n      allowHeightOverflow: true, // TODO: this is a temporary fix to make sure we can infinitely scroll\n      parameters: {\n        locale,\n        contentTypeID,\n        contentTypeFieldTitle,\n        contentTypeFieldDescription,\n        relatedFieldID,\n        relatedContentTypeFieldTitles,\n        selectedRelatedField,\n        alreadySelected: entries.map((e) => e.sys.id),\n      },\n    })\n    if (selectedEntries) {\n      const newEntries = [...entries, ...selectedEntries]\n      setEntries(newEntries)\n      props.sdk.field.setValue(newEntries)\n    }\n  }\n\n  // Fetch content type information for main and related fields\n  useEffect(() => {\n    let detachChangeHandler\n    setErrorMessage(\"\")\n    // Main content type\n    props.sdk.space\n      .getContentType(contentTypeID)\n      .then((contentType) => {\n        setContentTypeFieldTitle(contentType.displayField)\n        // Related content type\n        const relatedField = contentType.fields.find(\n          (e) => e.id === relatedFieldID\n        )\n        // Can be more than 1 content type\n        const relatedContentTypesIDs = relatedField\n          ? relatedField.validations[0].linkContentType\n          : []\n        // title fields for all related content types\n        Promise.all(\n          relatedContentTypesIDs.map((relatedContentTypeID) =>\n            props.sdk.space.getContentType(relatedContentTypeID)\n          )\n        )\n          .then((relatedContentTypes) => {\n            const fieldTitles = relatedContentTypes.reduce(\n              (acc, relatedContentType) => {\n                acc[relatedContentType.sys.id] = relatedContentType.displayField\n                return acc\n              },\n              {}\n            )\n            setRelatedContentTypeFieldTitles(fieldTitles)\n            // fetch related field on current entry (if any)\n            if (props.sdk.entry.fields[relatedFieldID]) {\n              detachChangeHandler = props.sdk.entry.fields[\n                relatedFieldID\n              ].onValueChanged((value) => {\n                const valueID = value ? value.sys.id : null\n                if (valueID) {\n                  props.sdk.space\n                    .getEntry(valueID)\n                    .then((entry) => {\n                      const contentType = entry.sys.contentType.sys.id\n                      const titleField = fieldTitles[contentType]\n                      setSelectedRelatedField({\n                        id: valueID,\n                        title: entry.fields[titleField][locale],\n                        contentType,\n                      })\n                    })\n                    .catch((error) => {\n                      console.log(\n                        \"there has been an error (getContentType): \",\n                        error\n                      )\n                      setErrorMessage(\"The app configuration is not correct\")\n                    })\n                } else {\n                  setSelectedRelatedField(null)\n                }\n              })\n            } else {\n              setSelectedRelatedField(null)\n            }\n          })\n          .catch((error) => {\n            console.log(\n              \"there has been an error (getContentType - contentTypeFieldTitle): \",\n              error\n            )\n            setErrorMessage(\"The app configuration is not correct\")\n          })\n      })\n\n      .catch((error) => {\n        console.log(\n          \"there has been an error (getContentType - contentTypeFieldTitle): \",\n          error\n        )\n        setErrorMessage(\"The app configuration is not correct\")\n      })\n\n    props.sdk.window.startAutoResizer()\n    return detachChangeHandler\n  }, [])\n\n  return errorMessage ? (\n    <Paragraph>{errorMessage}</Paragraph>\n  ) : (\n    <>\n      <Flex marginBottom=\"spacingS\" flexDirection=\"column\">\n        <MultipleEntryReferenceEditor\n          renderCustomActions={() => null}\n          entityType=\"Entry\"\n          viewType=\"link\"\n          sdk={props.sdk}\n          isInitiallyDisabled={true}\n          parameters={{\n            instance: {\n              showCreateEntityAction: false,\n              showLinkEntityAction: false,\n            },\n          }}\n        />\n      </Flex>\n      <Button\n        onClick={() =>\n          openSearch(\n            locale,\n            contentTypeID,\n            contentTypeFieldTitle,\n            descriptionFieldName,\n            relatedFieldID,\n            relatedContentTypeFieldTitles,\n            selectedRelatedField\n          )\n        }\n      >\n        Add exisiting entries\n      </Button>\n    </>\n  )\n}\n\nexport default Field\n","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Dialog.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/LocalhostWarning.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/utils/hooks/useContentfulFields.ts",[],["52","53"],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/FilterAutoComplete.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/FilterAutoCompleteEntries.tsx",["54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":147,"column":6,"nodeType":"61","endLine":147,"endColumn":8,"suggestions":"62"},{"ruleId":"55","replacedBy":"63"},{"ruleId":"57","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":29,"column":21,"nodeType":"67","messageId":"68","endLine":29,"endColumn":33},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'contentTypeID', 'locale', 'props.sdk.entry.fields', 'props.sdk.space', 'props.sdk.window', and 'relatedFieldID'. Either include them or remove the dependency array.","ArrayExpression",["71"],["69"],["70"],"@typescript-eslint/no-unused-vars","'setIsLoading' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},"Update the dependencies array to be: [contentTypeID, locale, props.sdk.entry.fields, props.sdk.space, props.sdk.window, relatedFieldID]",{"range":"74","text":"75"},[4971,4973],"[contentTypeID, locale, props.sdk.entry.fields, props.sdk.space, props.sdk.window, relatedFieldID]"]