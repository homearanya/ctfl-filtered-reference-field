[{"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/index.tsx":"1","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/ConfigScreen.tsx":"2","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Page.tsx":"3","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/EntryEditor.tsx":"4","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Sidebar.tsx":"5","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Field.tsx":"6","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Dialog.tsx":"7","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/LocalhostWarning.tsx":"8","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/utils/hooks/useContentfulFields.ts":"9","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/FilterAutoComplete.tsx":"10","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/FilterAutoCompleteEntries.tsx":"11"},{"size":2319,"mtime":1611311951410,"results":"12","hashOfConfig":"13"},{"size":2273,"mtime":1611311951410,"results":"14","hashOfConfig":"13"},{"size":317,"mtime":1611311951410,"results":"15","hashOfConfig":"13"},{"size":335,"mtime":1611311951410,"results":"16","hashOfConfig":"13"},{"size":338,"mtime":1611311951410,"results":"17","hashOfConfig":"13"},{"size":6915,"mtime":1611677487860,"results":"18","hashOfConfig":"13"},{"size":6629,"mtime":1611679435140,"results":"19","hashOfConfig":"13"},{"size":1232,"mtime":1611311951410,"results":"20","hashOfConfig":"13"},{"size":1138,"mtime":1611521094680,"results":"21","hashOfConfig":"13"},{"size":3978,"mtime":1611678965340,"results":"22","hashOfConfig":"13"},{"size":1912,"mtime":1611678961410,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"rbsrsk",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/index.tsx",[],["49","50"],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/ConfigScreen.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Page.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/EntryEditor.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Sidebar.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Field.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/Dialog.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/LocalhostWarning.tsx",[],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/utils/hooks/useContentfulFields.ts",[],["51","52"],"/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/FilterAutoComplete.tsx",["53"],"// @ts-nocheck\nimport React, { useState, useEffect, useCallback } from \"react\"\nimport { Autocomplete } from \"@contentful/forma-36-react-components\"\nimport { DialogExtensionSDK } from \"@contentful/app-sdk\"\n\ntype Item = {\n  label: string\n  lowerCaseLabel: string\n  id: string\n  contentType: string\n}\n\ntype SelectedRelatedField = {\n  id: string\n  title: string\n  contentType: string\n}\n\ninterface FilterAutoCompleteProps {\n  sdk: DialogExtensionSDK\n  relatedFieldID: string\n  selectedRelatedField: SelectedRelatedField | null\n  relatedContentTypeFieldTitles: { [key: string]: string }\n  locale: string\n  setFilter: (e: SelectedRelatedField) => void\n  clearEntryFilter: () => void\n}\n\nconst FilterAutoComplete = ({\n  sdk,\n  relatedFieldID,\n  selectedRelatedField,\n  relatedContentTypeFieldTitles,\n  locale,\n  setFilter,\n  clearEntryFilter,\n}: FilterAutoCompleteProps) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [items, setItems] = useState<Item[] | []>([])\n  const [filteredItems, setFilteredItems] = useState<Item[] | []>([])\n  const [selectedItem, setSelectedItem] = useState<Item | null>(\n    selectedRelatedField && selectedRelatedField.id\n      ? {\n          label: selectedRelatedField.title,\n          lowerCaseLabel: selectedRelatedField.title.toLowerCase(),\n          id: selectedRelatedField.id,\n          contentType: selectedRelatedField.contentType,\n        }\n      : null\n  )\n\n  const handleQueryChange = useCallback(\n    (query: string) => {\n      const lowerCaseQuery = query.toLowerCase()\n      setFilteredItems(\n        query\n          ? items.filter((item) => item.lowerCaseLabel.includes(lowerCaseQuery))\n          : items\n      )\n    },\n    [items, setFilteredItems]\n  )\n\n  useEffect(() => {\n    setIsLoading(true)\n    Promise.all(\n      Object.keys(relatedContentTypeFieldTitles).map((relatedContentId) =>\n        sdk.space.getEntries({\n          content_type: relatedContentId,\n          limit: 1000,\n        })\n      )\n    )\n      .then((dataArray) => {\n        const dataItems = dataArray.reduce((acc, data) => {\n          const newArray = [...acc, ...data.items]\n          return newArray\n        }, [])\n        const items = dataItems\n          .filter(\n            (item) =>\n              item.fields[\n                relatedContentTypeFieldTitles[item.sys.contentType.sys.id]\n              ]\n          )\n          .map((item) => {\n            return {\n              label:\n                item.fields[\n                  relatedContentTypeFieldTitles[item.sys.contentType.sys.id]\n                ][locale],\n              lowerCaseLabel: item.fields[\n                relatedContentTypeFieldTitles[item.sys.contentType.sys.id]\n              ][locale].toLowerCase(),\n              id: item.sys.id,\n              contentType: item.sys.contentType.sys.id,\n            }\n          })\n        setItems(items)\n        setFilteredItems(items)\n        setIsLoading(false)\n      })\n\n      .catch((error) =>\n        console.log(\"there has been an error(getEntries): \", error)\n      )\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <Autocomplete<Item>\n      maxHeight={200}\n      items={filteredItems}\n      onQueryChange={handleQueryChange}\n      onChange={(e) => {\n        setSelectedItem(e)\n        const newSelectedRelatedField = {\n          title: e.label,\n          id: e.id,\n          contentType: e.contentType,\n        }\n        setFilter(newSelectedRelatedField)\n        clearEntryFilter(null)\n      }}\n      placeholder={\n        selectedItem ? selectedItem.label : `Choose ${relatedFieldID}`\n      }\n      isLoading={isLoading}\n      width=\"medium\"\n      disabled={false}\n      emptyListMessage=\"There are no items to choose from\"\n      noMatchesMessage=\"No matches\"\n      dropdownProps={{ isFullWidth: true }}\n    >\n      {(options: Item[]) =>\n        options.map((option: Item) => (\n          <span key={option.lowerCaseLabel}>{option.label}</span>\n        ))\n      }\n    </Autocomplete>\n  )\n}\n\nexport default FilterAutoComplete\n","/home/carloswebdev/dev/contentful/apps/filtered-reference/src/components/FilterAutoCompleteEntries.tsx",["54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"55","replacedBy":"59"},{"ruleId":"57","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":41,"column":24,"nodeType":"63","messageId":"64","endLine":41,"endColumn":39},{"ruleId":"65","severity":1,"message":"66","line":56,"column":15,"nodeType":"63","messageId":"67","endLine":56,"endColumn":38},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],["68"],["69"],"@typescript-eslint/no-redeclare","'setSelectedItem' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'newSelectedRelatedField' is assigned a value but never used.","unusedVar","no-global-assign","no-unsafe-negation"]